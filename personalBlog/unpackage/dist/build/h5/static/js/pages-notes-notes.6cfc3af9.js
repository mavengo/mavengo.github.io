(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["pages-notes-notes"],{"417e":function(t,n,e){"use strict";var r=e("e0c2"),i=e.n(r);i.a},4655:function(t,n,e){"use strict";e.r(n);var r=e("d832"),i=e("71f3");for(var a in i)"default"!==a&&function(t){e.d(n,t,(function(){return i[t]}))}(a);e("417e");var o,c=e("f0c5"),s=Object(c["a"])(i["default"],r["b"],r["c"],!1,null,"570a9cf4",null,!1,r["a"],o);n["default"]=s.exports},"51b1":function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r={data:function(){return{}},methods:{goback:function(){uni.navigateTo({url:"/pages/login/login"})}}};n.default=r},6788:function(t,n,e){var r=e("24fb");n=r(!1),n.push([t.i,'@charset "UTF-8";\r\n/**\r\n * 这里是uni-app内置的常用样式变量\r\n *\r\n * uni-app 官方扩展插件及插件市场（https://ext.dcloud.net.cn）上很多三方插件均使用了这些样式变量\r\n * 如果你是插件开发者，建议你使用scss预处理，并在插件代码中直接使用这些变量（无需 import 这个文件），方便用户通过搭积木的方式开发整体风格一致的App\r\n *\r\n */\r\n/**\r\n * 如果你是App开发者（插件使用者），你可以通过修改这些变量来定制自己的插件主题，实现自定义主题功能\r\n *\r\n * 如果你的项目同样使用了scss预处理，你也可以直接在你的 scss 代码中使用如下变量，同时无需 import 这个文件\r\n */\r\n/* 颜色变量 */\r\n/* 行为相关颜色 */\r\n/* 文字基本颜色 */\r\n/* 背景颜色 */\r\n/* 边框颜色 */\r\n/* 尺寸变量 */\r\n/* 文字尺寸 */\r\n/* 图片尺寸 */\r\n/* Border Radius */\r\n/* 水平间距 */\r\n/* 垂直间距 */\r\n/* 透明度 */\r\n/* 文章场景相关 */.container[data-v-570a9cf4]{padding:%?20?%}p[data-v-570a9cf4]{margin:%?20?% 0;font-weight:900}.subBtn[data-v-570a9cf4]{margin:10px auto;width:200px;height:50px;background-color:#2194ff;color:#fff;border-radius:20px}.file[data-v-570a9cf4]{padding:%?20?%;word-wrap:wrap}.file uni-text[data-v-570a9cf4]{text-indent:2em}',""]),t.exports=n},"71f3":function(t,n,e){"use strict";e.r(n);var r=e("51b1"),i=e.n(r);for(var a in r)"default"!==a&&function(t){e.d(n,t,(function(){return r[t]}))}(a);n["default"]=i.a},d832:function(t,n,e){"use strict";var r;e.d(n,"b",(function(){return i})),e.d(n,"c",(function(){return a})),e.d(n,"a",(function(){return r}));var i=function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("v-uni-view",{staticClass:"container"},[e("p",[t._v("【Git】rebase 用法小结")]),e("v-uni-view",{staticClass:"file"},[e("v-uni-text",[t._v("rebase在git中是一个非常有魅力的命令，使用得当会极大提高自己的工作效率；相反，如果乱用，会给团队中其他人带来麻烦。它的作用简要概括为：可以对某一段线性提交历史进行编辑、删除、复制、粘贴；因此，合理使用rebase命令可以使我们的提交历史干净、简洁！")]),e("br"),e("p",[t._v("1.合并多个commit为一个完整commit")]),t._v("当我们在本地仓库中提交了多次，在我们把本地提交push到公共仓库中之前，为了让提交记录更简洁明了，我们希望把如下分支B、C、D三个提交记录合并为一个完整的提交，然后再push到公共仓库。\n\t\t\n\t\t现在我们在测试分支上添加了四次提交，我们的目标是把最后三个提交合并为一个提交：\n\t\t\n\t\t\n\t\t\n\t\t这里我们使用命令:\n\t\t\n\t\t  git rebase -i  [startpoint]  [endpoint]\n\t\t其中-i的意思是--interactive，即弹出交互式的界面让用户编辑完成合并操作，[startpoint] [endpoint]则指定了一个编辑区间，如果不指定[endpoint]，则该区间的终点默认是当前分支HEAD所指向的commit(注：该区间指定的是一个前开后闭的区间)。\n\t\t在查看到了log日志后，我们运行以下命令：\n\t\t\n\t\tgit rebase -i 36224db\n\t\t或:\n\t\t\n\t\tgit rebase -i HEAD~3 \n\t\t然后我们会看到如下界面:\n\t\t\n\t\t上面未被注释的部分列出的是我们本次rebase操作包含的所有提交，下面注释部分是git为我们提供的命令说明。每一个commit id 前面的pick表示指令类型，git 为我们提供了以下几个命令:\n\t\tpick：保留该commit（缩写:p）\n\t\treword：保留该commit，但我需要修改该commit的注释（缩写:r）\n\t\tedit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）\n\t\tsquash：将该commit和前一个commit合并（缩写:s）\n\t\tfixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）\n\t\texec：执行shell命令（缩写:x）\n\t\tdrop：我要丢弃该commit（缩写:d）\n\t\t根据我们的需求，我们将commit内容编辑如下:\n\t\t\n\t\t然后是注释修改界面:\n\t\t\n\t\t\n\t\t编辑完保存即可完成commit的合并了："),e("p",[t._v("2.将某一段commit粘贴到另一个分支上")]),t._v("当我们项目中存在多个分支，有时候我们需要将某一个分支中的一段提交同时应用到其他分支中，就像下图：\n\t\t\n\t\t我们希望将develop分支中的C~E部分复制到master分支中，这时我们就可以通过rebase命令来实现（如果只是复制某一两个提交到其他分支，建议使用更简单的命令:git cherry-pick）。\n\t\t在实际模拟中，我们创建了master和develop两个分支:\n\t\tmaster分支:\n\t\tdevelop分支:\n\t\t我们使用命令的形式为:"),e("p",[t._v("git rebase   [startpoint]   [endpoint]  --onto  [branchName]")]),t._v("其中，[startpoint] [endpoint]仍然和上一个命令一样指定了一个编辑区间(前开后闭)，--onto的意思是要将该指定的提交复制到哪个分支上。\n\t\t所以，在找到C(90bc0045b)和E(5de0da9f2)的提交id后，我们运行以下命令："),e("p",[t._v("git  rebase   90bc0045b^   5de0da9f2   --onto master")]),t._v("注:因为[startpoint] [endpoint]指定的是一个前开后闭的区间，为了让这个区间包含C提交，我们将区间起始点向后退了一步。\n\t\t运行完成后查看当前分支的日志:\n\t\t可以看到，C~E部分的提交内容已经复制到了G的后面了，大功告成？NO！我们看一下当前分支的状态:\n\t\t当前HEAD处于游离状态，实际上，此时所有分支的状态应该是这样:\n\t\t\n\t\t所以，虽然此时HEAD所指向的内容正是我们所需要的，但是master分支是没有任何变化的，git只是将C~E部分的提交内容复制一份粘贴到了master所指向的提交后面，我们需要做的就是将master所指向的提交id设置为当前HEAD所指向的提交id就可以了，即:"),e("p",[t._v("git checkout master")]),e("p",[t._v("git reset --hard  0c72e64")]),t._v("此时我们才大功告成！")],1),e("v-uni-button",{staticClass:"subBtn",attrs:{type:"default"},on:{click:function(n){arguments[0]=n=t.$handleEvent(n),t.goback()}}},[t._v("返回登录页面")])],1)},a=[]},e0c2:function(t,n,e){var r=e("6788");"string"===typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);var i=e("4f06").default;i("398da87b",r,!0,{sourceMap:!1,shadowMode:!1})}}]);